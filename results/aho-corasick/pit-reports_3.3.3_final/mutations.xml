<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/TrieConfig;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/TrieConfig;)V</methodDescription><lineNumber>33</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>16</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldrootState mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>14</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>14</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>5</index><block>1</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>14</index><block>3</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='20'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>14</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>43</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>14</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>51</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>27</index><block>4</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/State::addEmit</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><block>9</block><killingTest/><description>removed call to org/ahocorasick/trie/Trie::addKeyword</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>([Ljava/lang/String;)V</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::addKeyword</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>11</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::addState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>builder</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>314</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>95</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::builder to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>75</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>77</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>46</index><block>75</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>46</index><block>75</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>46</index><block>75</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>46</index><block>75</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>264</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>46</index><block>75</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>259</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>31</index><block>74</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/State::setFailure</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>109</index><block>79</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/State::setFailure</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>constructFailureStates</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>115</index><block>79</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/State::addEmit</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>7</index><block>27</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>11</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>7</index><block>27</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>11</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>7</index><block>27</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>11</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>27</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>11</index><block>28</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>26</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>7</index><block>27</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>11</index><block>28</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>containsMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Z</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.containsMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>7</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>7</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>7</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>7</index><block>17</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createFragment</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;I)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>22</index><block>19</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeFullSentence(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::createFragment to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>10</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>10</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>10</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>10</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>11</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>10</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>createMatch</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;Ljava/lang/String;)Lorg/ahocorasick/trie/Token;</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeFullSentence(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::createMatch to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>39</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>109</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>39</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>109</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>39</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>109</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>39</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>108</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>109</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>110</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>46</index><block>41</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>36</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>37</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>38</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>42</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><block>43</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>86</index><block>44</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><block>47</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>39</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>109</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>36</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>57</index><block>42</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>118</index><block>46</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>46</index><block>41</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>46</index><block>41</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>46</index><block>41</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>46</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>175</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>46</index><block>41</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>6</index><block>36</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>19</index><block>38</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>86</index><block>44</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>127</index><block>47</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>6</index><block>36</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>19</index><block>38</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>59</index><block>42</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>86</index><block>44</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>120</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>127</index><block>47</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>6</index><block>36</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>19</index><block>38</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>59</index><block>42</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>86</index><block>44</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>120</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>127</index><block>47</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>6</index><block>36</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>19</index><block>38</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>59</index><block>42</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>86</index><block>44</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>120</index><block>46</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>127</index><block>47</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>6</index><block>36</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>168</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>19</index><block>38</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>59</index><block>42</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>186</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>86</index><block>44</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>120</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>190</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>127</index><block>47</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>179</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>59</index><block>42</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>120</index><block>46</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>169</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>26</index><block>39</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::firstMatch to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>191</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>131</index><block>48</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::firstMatch to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>136</index><block>49</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::firstMatch to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>firstMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>150</index><block>52</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/Trie::firstMatch to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>getRootState</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>94</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldrootState mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>getRootState</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>305</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>94</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::getRootState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>getState</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/State;Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>245</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>70</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>getState</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/State;Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>28</index><block>72</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::getState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isCaseInsensitive</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>93</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isCaseInsensitive</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>93</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>11</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>22</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>32</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>39</index><block>57</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>43</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>11</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>22</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>32</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>39</index><block>57</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>43</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>11</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>22</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>32</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>39</index><block>57</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>43</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>11</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>12</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>22</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>23</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>32</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>33</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>39</index><block>57</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>43</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>53</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>11</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>22</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>32</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>39</index><block>57</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>43</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>26</index><block>55</block><killingTest/><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>26</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.testUnicode2(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>26</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.testUnicode2(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>26</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>207</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>26</index><block>55</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>15</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>5</index><block>53</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>15</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>36</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>5</index><block>53</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>15</index><block>54</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>36</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>5</index><block>53</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>15</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>36</index><block>56</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>5</index><block>53</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>15</index><block>54</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>36</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>5</index><block>53</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>36</index><block>56</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>isPartialMatch</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>205</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>47</index><block>58</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/util/Collection;</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>21</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::parseText to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>8</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>8</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>8</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>30</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCase(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>31</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>32</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>8</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>26</index><block>30</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>53</index><block>32</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>15</index><block>29</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>15</index><block>29</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>28</index><block>30</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCase(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>51</index><block>31</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>55</index><block>32</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>28</index><block>30</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCase(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>51</index><block>31</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>55</index><block>32</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>28</index><block>30</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>51</index><block>31</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>55</index><block>32</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>28</index><block>30</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>51</index><block>31</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>55</index><block>32</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>146</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>28</index><block>30</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCase(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>51</index><block>31</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/EmitHandler;)V</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>55</index><block>32</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>15</index><block>22</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>28</index><block>23</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>41</index><block>24</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>43</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='16'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>17</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='14'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>30</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>43</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>17</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>30</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>43</index><block>24</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>17</index><block>22</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>30</index><block>23</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>43</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>17</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>30</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>43</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>17</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>123</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>30</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>61</index><block>25</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::parseText to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>22</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::parseText</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::removePartialMatches</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>parseText</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Lorg/ahocorasick/trie/handler/StatefulEmitHandler;)Ljava/util/Collection;</methodDescription><lineNumber>124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::removePartialMatchesWhiteSpaceSeparated</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatches</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>222</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><block>59</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/util/ListElementRemoval::removeIf</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>35</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>46</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>55</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>35</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>46</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>55</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>35</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>46</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>55</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>35</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>36</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>46</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>47</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>55</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>56</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><block>61</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>62</block><killingTest/><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>35</index><block>62</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>46</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>55</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>31</index><block>61</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>39</index><block>62</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>51</index><block>63</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>59</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>31</index><block>61</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>39</index><block>62</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>51</index><block>63</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>59</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>31</index><block>61</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>39</index><block>62</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>51</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>59</index><block>64</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>31</index><block>61</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>39</index><block>62</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>51</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>59</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>31</index><block>61</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>230</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>39</index><block>62</block><killingTest/><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>51</index><block>63</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>removePartialMatchesWhiteSpaceSeparated</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/util/List;)V</methodDescription><lineNumber>231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>59</index><block>64</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>3</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>40</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>51</index><block>87</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>55</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>3</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>40</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>51</index><block>87</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>55</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>3</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>40</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>51</index><block>87</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>55</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>3</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>39</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>40</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>41</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>51</index><block>87</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>55</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>83</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>86</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>89</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>3</index><block>82</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>40</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>51</index><block>87</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>55</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>64</index><block>89</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>16</index><block>83</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>46</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>16</index><block>83</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>46</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>48</index><block>86</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>62</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>66</index><block>89</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>16</index><block>83</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>46</index><block>85</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>48</index><block>86</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>62</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>66</index><block>89</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>16</index><block>83</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>46</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>48</index><block>86</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>62</index><block>88</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>66</index><block>89</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='24'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>16</index><block>83</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>46</index><block>85</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>48</index><block>86</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>62</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>66</index><block>89</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>48</index><block>86</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>62</index><block>88</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>66</index><block>89</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>storeEmits</mutatedMethod><methodDescription>(ILorg/ahocorasick/trie/State;Lorg/ahocorasick/trie/handler/EmitHandler;)Z</methodDescription><lineNumber>297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>78</index><block>92</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>15</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>37</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>74</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>15</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>37</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>74</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>15</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>37</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>74</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>15</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>36</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>37</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>73</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>74</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>15</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>37</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>74</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>38</index><block>13</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>75</index><block>15</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeFullSentence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>38</index><block>13</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>75</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie</mutatedClass><mutatedMethod>tokenize</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/util/Collection;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>90</index><block>16</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeTokensInSequence(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie::tokenize to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='46'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='46'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(II)V</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>14</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>8</index><block>20</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>8</index><block>20</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>8</index><block>20</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>20</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>22</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>36</index><block>23</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>19</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>8</index><block>20</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>19</index><block>21</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>33</index><block>23</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>5</index><block>19</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>5</index><block>19</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>5</index><block>19</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>5</index><block>19</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>5</index><block>19</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>27</index><block>21</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>83</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>20</block><killingTest/><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>compareTo</mutatedMethod><methodDescription>(Ljava/lang/Object;)I</methodDescription><lineNumber>87</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><block>23</block><killingTest>org.ahocorasick.interval.IntervalTest.comparable(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>8</index><block>13</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>30</index><block>16</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>34</index><block>17</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>8</index><block>13</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>30</index><block>16</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>34</index><block>17</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>8</index><block>13</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>30</index><block>16</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>34</index><block>17</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>13</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>30</index><block>16</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>34</index><block>17</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>12</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>14</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>15</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>8</index><block>13</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>30</index><block>16</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>34</index><block>17</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>19</index><block>14</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>24</index><block>15</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>22</index><block>14</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>29</index><block>15</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>22</index><block>14</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>29</index><block>15</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>22</index><block>14</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>29</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>22</index><block>14</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>29</index><block>15</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>22</index><block>14</block><killingTest/><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>72</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>29</index><block>15</block><killingTest/><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>5</index><block>12</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>5</index><block>12</block><killingTest/><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='8'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>5</index><block>12</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>5</index><block>12</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>5</index><block>12</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>68</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>13</block><killingTest/><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>38</index><block>17</block><killingTest>org.ahocorasick.trie.EmitTest.equals(org.ahocorasick.trie.EmitTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='39'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>getEnd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>getEnd</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTest.construct(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='41'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>getStart</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>getStart</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOD.FirstOperandMutator</mutator><index>6</index><block>18</block><killingTest/><description>AOD: Replaced integer remainder with first operand</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOD.FirstOperandMutator</mutator><index>10</index><block>18</block><killingTest/><description>AOD: Replaced integer remainder with first operand</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithAddMutator</mutator><index>6</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with addition</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithAddMutator</mutator><index>10</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with addition</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithDivMutator</mutator><index>6</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with division</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithDivMutator</mutator><index>10</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with division</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithSubMutator</mutator><index>6</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with subtraction</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithSubMutator</mutator><index>10</index><block>18</block><killingTest/><description>AOR: Replaced integer modulus with subtraction</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>18</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>9</index><block>18</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>18</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>9</index><block>18</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>18</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>9</index><block>18</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>18</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 100 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>9</index><block>18</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 100 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>11</index><block>18</block><killingTest/><description>Replaced operate with second operand</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>6</index><block>18</block><killingTest/><description>Replaced integer modulus with multiplication</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>10</index><block>18</block><killingTest/><description>Replaced integer modulus with multiplication</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>18</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>9</index><block>18</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>18</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>8</index><block>18</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>12</index><block>18</block><killingTest/><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>11</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>15</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>11</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>15</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>11</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>15</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>11</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTest.pointDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>15</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTest.pointDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>6</index><block>8</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>10</index><block>9</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>11</index><block>10</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>15</index><block>11</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>8</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>9</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>6</index><block>8</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>10</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTest.pointDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>6</index><block>8</block><killingTest/><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>10</index><block>9</block><killingTest/><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>10</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>10</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>18</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTest.pointOverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>15</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>19</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>15</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>19</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>15</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>19</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>15</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>19</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>7</index><block>4</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>14</index><block>5</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>4</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>15</index><block>6</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>19</index><block>7</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>4</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>5</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>7</index><block>4</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>7</index><block>4</block><killingTest/><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>7</index><block>4</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>7</index><block>4</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>58</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.interval.IntervalTest.intervaloverlaps(org.ahocorasick.interval.IntervalTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>overlapsWith</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Interval;)Z</methodDescription><lineNumber>57</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>23</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTest.intervalDoesNotOverlap(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>8</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>8</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>8</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>9</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>8</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='9'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>6</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTest.size(org.ahocorasick.interval.IntervalTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>7</index><block>24</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldstart mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>12</index><block>24</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/Interval and fieldend mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Interval.java</sourceFile><mutatedClass>org.ahocorasick.interval.Interval</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>98</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><block>24</block><killingTest/><description>mutated return of Object value for org/ahocorasick/interval/Interval::toString to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldintervals mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>17</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>18</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldpoint mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>50</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldpoint mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>65</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldpoint mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>28</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>78</index><block>5</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldintervals mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>33</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>99</index><block>7</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldleft mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>113</index><block>8</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldright mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>23</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>51</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>25</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>66</index><block>3</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>91</index><block>6</block><killingTest/><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>105</index><block>7</block><killingTest/><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>91</index><block>6</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>35</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>105</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>22</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>20</index><block>22</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>20</index><block>22</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>20</index><block>22</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>20</index><block>22</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>addToOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Ljava/util/List;Ljava/util/List;)V</methodDescription><lineNumber>82</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>20</index><block>22</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>51</index><block>30</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>30</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>10</index><block>27</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldintervals mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>51</index><block>30</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.trie.TrieTest.nonOverlappingFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>51</index><block>30</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>51</index><block>30</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>51</index><block>30</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>36</index><block>28</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>51</index><block>30</block><killingTest/><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/IntervalNode$Direction;)Ljava/util/List;</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>66</index><block>32</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalNode::checkForOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlapsToTheLeft</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>25</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalNode::checkForOverlapsToTheLeft to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>checkForOverlapsToTheRight</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>26</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalNode::checkForOverlapsToTheRight to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.AOR.ReplaceArithmeticWithSubMutator</mutator><index>71</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>AOR: Replaced integer division with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>3</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>36</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>50</index><block>12</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>70</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>3</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>36</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>50</index><block>12</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>70</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>3</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>36</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>50</index><block>12</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>70</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>3</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>36</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>50</index><block>12</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted -1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>69</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>70</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>71</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>40</index><block>11</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>54</index><block>13</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>40</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>12</block><killingTest/><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>54</index><block>13</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>41</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>3</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>36</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>50</index><block>12</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>70</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>40</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>54</index><block>13</block><killingTest/><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>51</index><block>12</block><killingTest/><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>54</index><block>13</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>40</index><block>11</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>51</index><block>12</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>54</index><block>13</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>40</index><block>11</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>51</index><block>12</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>54</index><block>13</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>40</index><block>11</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>51</index><block>12</block><killingTest/><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>54</index><block>13</block><killingTest/><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>37</index><block>10</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>40</index><block>11</block><killingTest/><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>51</index><block>12</block><killingTest/><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>49</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>54</index><block>13</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>determineMedian</mutatedMethod><methodDescription>(Ljava/util/List;)I</methodDescription><lineNumber>53</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>72</index><block>15</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlappingRanges</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/IntervalNode;Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>33</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlappingRanges</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/IntervalNode;Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>119</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>19</index><block>35</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalNode::findOverlappingRanges to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>13</index><block>16</block><killingTest/><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>16</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>10</index><block>16</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldpoint mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>21</index><block>17</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldright mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>39</index><block>18</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldpoint mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>50</index><block>19</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldleft mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>71</index><block>20</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldintervals mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>80</index><block>20</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldleft mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>91</index><block>20</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalNode and fieldright mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>13</index><block>16</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPEQ</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IF_ICMPEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGE</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>13</index><block>16</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPGT</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>13</index><block>16</block><killingTest/><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLE</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>13</index><block>16</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPLT</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>13</index><block>16</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>63</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorICMPNE</mutator><index>42</index><block>18</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IF_ICMPNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>99</index><block>20</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalNode::findOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>61</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><block>17</block><killingTest/><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>62</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>33</index><block>17</block><killingTest/><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>65</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>53</index><block>19</block><killingTest/><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><block>19</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>69</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>72</index><block>20</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>83</index><block>20</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>IntervalNode.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalNode</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>94</index><block>20</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/interval/IntervalNode::addToOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>4</index><block>0</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>4</index><block>0</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>4</index><block>0</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>4</index><block>0</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>55</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>4</index><block>0</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldsuccess mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>16</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fielddepth mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>29</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldrootState mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>21</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>21</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>21</index><block>1</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>21</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(I)V</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>21</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>16</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>16</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldemits mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>12</index><block>17</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldemits mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>17</index><block>17</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Ljava/util/Collection;)V</methodDescription><lineNumber>113</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><block>19</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/State::addEmit</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>17</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>17</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>17</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>17</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>18</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>93</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>13</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>17</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>94</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>16</index><block>14</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fielddepth mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>95</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>24</index><block>14</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldsuccess mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>97</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>33</index><block>14</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::addState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>addState</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>88</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>39</index><block>12</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::addState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>21</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>21</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldemits mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>23</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>14</index><block>23</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::emit to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>failure</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>24</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldfailure mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>failure</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>24</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::failure to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getDepth</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>15</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fielddepth mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getDepth</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>15</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getStates</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>26</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldsuccess mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getStates</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>26</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::getStates to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getTransitions</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>27</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldsuccess mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>getTransitions</mutatedMethod><methodDescription>()Ljava/util/Collection;</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>6</index><block>27</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::getTransitions to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>74</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>8</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::nextState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>4</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>5</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>4</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldsuccess mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>16</index><block>6</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldrootState mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>21</index><block>7</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldrootState mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>12</index><block>4</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>12</index><block>4</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>12</index><block>4</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>12</index><block>4</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>66</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>12</index><block>4</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextState</mutatedMethod><methodDescription>(Ljava/lang/Character;Z)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>70</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>27</index><block>7</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::nextState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>nextStateIgnoreRootState</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/ahocorasick/trie/State;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>9</block><killingTest>org.ahocorasick.trie.StateTest.constructSequenceOfCharacters(org.ahocorasick.trie.StateTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/State::nextStateIgnoreRootState to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>State.java</sourceFile><mutatedClass>org.ahocorasick.trie.State</mutatedClass><mutatedMethod>setFailure</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/State;)V</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>25</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/State and fieldfailure mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>18</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>21</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='19'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>361</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::addKeyword to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeyword</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::access$300</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>(Ljava/util/Collection;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>5</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>(Ljava/util/Collection;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>5</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::addKeywords to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>(Ljava/util/Collection;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>5</block><killingTest/><description>removed call to org/ahocorasick/trie/Trie::access$500</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='14'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>([Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>4</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>([Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>4</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::addKeywords to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>addKeywords</mutatedMethod><methodDescription>([Ljava/lang/String;)Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>371</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>4</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::access$400</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>build</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie;</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>9</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>build</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie;</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>9</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>build</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie;</methodDescription><lineNumber>426</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>9</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::build to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>build</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie;</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/Trie::access$700</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>caseInsensitive</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>434</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>10</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::caseInsensitive to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>1</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>339</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::ignoreCase to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreCase</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>338</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/TrieConfig::setCaseInsensitive</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>2</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>2</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>349</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.testZeroLength(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::ignoreOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>ignoreOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>348</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/TrieConfig::setAllowOverlaps</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>6</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>6</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>6</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>393</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::onlyWholeWords to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWords</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>6</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/TrieConfig::setOnlyWholeWords</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>5</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>5</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>5</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>5</index><block>7</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>5</index><block>7</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>7</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrieConfig mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>10</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::onlyWholeWordsWhiteSpaceSeparated to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>onlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.testPartialMatchWhiteSpaces(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/TrieConfig::setOnlyWholeWordsWhiteSpaceSeparated</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>442</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>11</block><killingTest>org.ahocorasick.trie.TrieTest.startOfChurchillSpeech(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::removeOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>6</index><block>8</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>6</index><block>8</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>6</index><block>8</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>8</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$TrieBuilder and fieldtrie mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>416</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>8</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Trie$TrieBuilder::stopOnHit to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$TrieBuilder</mutatedClass><mutatedMethod>stopOnHit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Trie$TrieBuilder;</methodDescription><lineNumber>415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>8</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>removed call to org/ahocorasick/trie/TrieConfig::setStopOnHit</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>8</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>13</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>18</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>23</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>28</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>8</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>13</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>18</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>23</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>28</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>8</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>13</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>18</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>23</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>28</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>8</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>13</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>18</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>23</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>28</index><block>0</block><killingTest>org.ahocorasick.trie.TrieTest.recipesFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>8</index><block>0</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>13</index><block>0</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>18</index><block>0</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>23</index><block>0</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>28</index><block>0</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>5</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldallowOverlaps mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>7</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>14</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWords mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>19</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWordsWhiteSpaceSeparated mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>24</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldcaseInsensitive mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>29</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldstopOnHit mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isAllowOverlaps</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>24</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>3</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldallowOverlaps mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isAllowOverlaps</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>24</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>3</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='33'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isCaseInsensitive</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>9</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldcaseInsensitive mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isCaseInsensitive</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>48</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>9</block><killingTest>org.ahocorasick.trie.TrieTest.testIgnoreCaseFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isOnlyWholeWords</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>5</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWords mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isOnlyWholeWords</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>32</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>5</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatchFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isOnlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>7</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWordsWhiteSpaceSeparated mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isOnlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>7</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='23'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isStopOnHit</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldstopOnHit mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>isStopOnHit</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>setAllowOverlaps</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>28</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>4</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldallowOverlaps mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>setCaseInsensitive</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>52</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>10</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldcaseInsensitive mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>setOnlyWholeWords</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>36</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>6</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWords mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>setOnlyWholeWordsWhiteSpaceSeparated</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>44</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>8</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldonlyWholeWordsWhiteSpaceSeparated mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>TrieConfig.java</sourceFile><mutatedClass>org.ahocorasick.trie.TrieConfig</mutatedClass><mutatedMethod>setStopOnHit</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/TrieConfig and fieldstopOnHit mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/util/List;)V</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>12</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalTree and fieldrootNode mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>8</block><killingTest/><description>M1: field dereference on object org/ahocorasick/interval/IntervalTree and fieldrootNode mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>findOverlaps</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;)Ljava/util/List;</methodDescription><lineNumber>46</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>7</index><block>8</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.findOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalTree::findOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>33</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>33</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>33</index><block>2</block><killingTest/><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>33</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>26</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFNE</mutator><index>33</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>changed conditional boundary to IFNE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>84</index><block>7</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>mutated return of Object value for org/ahocorasick/interval/IntervalTree::removeOverlaps to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalTreeTest.removeOverlaps(org.ahocorasick.interval.IntervalTreeTest)</killingTest><description>removed call to java/util/Collections::sort</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>IntervalTree.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalTree</mutatedClass><mutatedMethod>removeOverlaps</mutatedMethod><methodDescription>(Ljava/util/List;)Ljava/util/List;</methodDescription><lineNumber>40</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>80</index><block>7</block><killingTest/><description>removed call to java/util/Collections::sort</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='22'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>10</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/DefaultEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>10</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>10</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>10</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='21'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>10</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='21'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>10</index><block>1</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='21'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/DefaultEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>emit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>11</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestAndStopOnHit(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='22'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>getEmits</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/DefaultEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>DefaultEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.DefaultEmitHandler</mutatedClass><mutatedMethod>getEmits</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>20</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestWithCapitalKeywords(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/handler/DefaultEmitHandler::getEmits to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>12</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>19</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>12</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>12</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>12</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSize(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>12</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>12</index><block>1</block><killingTest/><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorBySize.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorBySize</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>15</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>25</index><block>2</block><killingTest>org.ahocorasick.interval.IntervalableComparatorBySizeTest.sortOnSizeThenPosition(org.ahocorasick.interval.IntervalableComparatorBySizeTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;Lorg/ahocorasick/trie/Emit;)V</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>10</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/MatchToken and fieldemit mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>getEmit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>19</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/MatchToken and fieldemit mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>getEmit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>19</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/MatchToken::getEmit to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 1 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>MatchToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.MatchToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>14</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>1</block><killingTest/><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>2</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeAll(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFEQ</mutator><index>27</index><block>2</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeAll(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>changed conditional boundary to IFEQ</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGE</mutator><index>27</index><block>2</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeNone(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>changed conditional boundary to IFGE</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFGT</mutator><index>27</index><block>2</block><killingTest/><description>changed conditional boundary to IFGT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLE</mutator><index>27</index><block>2</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeAll(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>changed conditional boundary to IFLE</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>42</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ROR.RORMutatorIFLT</mutator><index>27</index><block>2</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeAll(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>changed conditional boundary to IFLT</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ListElementRemoval.java</sourceFile><mutatedClass>org.ahocorasick.util.ListElementRemoval</mutatedClass><mutatedMethod>removeIf</mutatedMethod><methodDescription>(Ljava/util/List;Lorg/ahocorasick/util/ListElementRemoval$RemoveElementPredicate;)V</methodDescription><lineNumber>47</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>42</index><block>4</block><killingTest>org.ahocorasick.util.ListElementRemovalTest.removeAll(org.ahocorasick.util.ListElementRemovalTest)</killingTest><description>removed call to java/util/List::clear</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>getEmit</mutatedMethod><methodDescription>()Lorg/ahocorasick/trie/Emit;</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>2</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/FragmentToken::getEmit to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToAddOne</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR Add One, Substituted 1 with 2</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantToSubOne</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR sub One, Substituted 2 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith0</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with Zero, Substituted -1 with 0</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: CRCR replace with One, Substituted 0 with 1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateVariableMutator</mutator><index>3</index><block>1</block><killingTest/><description>Bug fixed: Negate variable, Substituted 1 with -1</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>FragmentToken.java</sourceFile><mutatedClass>org.ahocorasick.trie.FragmentToken</mutatedClass><mutatedMethod>isMatch</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>11</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>4</index><block>1</block><killingTest/><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='34'><sourceFile>Emit.java</sourceFile><mutatedClass>org.ahocorasick.trie.Emit</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(IILjava/lang/String;)V</methodDescription><lineNumber>12</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Emit and fieldkeyword mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='27'><sourceFile>Emit.java</sourceFile><mutatedClass>org.ahocorasick.trie.Emit</mutatedClass><mutatedMethod>getKeyword</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Emit and fieldkeyword mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Emit.java</sourceFile><mutatedClass>org.ahocorasick.trie.Emit</mutatedClass><mutatedMethod>getKeyword</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>16</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.misleadingTestFirstMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Emit::getKeyword to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Emit.java</sourceFile><mutatedClass>org.ahocorasick.trie.Emit</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>21</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>12</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Emit and fieldkeyword mutated with null check on object</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Emit.java</sourceFile><mutatedClass>org.ahocorasick.trie.Emit</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>21</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>15</index><block>2</block><killingTest/><description>mutated return of Object value for org/ahocorasick/trie/Emit::toString to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Trie;Ljava/lang/CharSequence;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>5</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$1 and fieldthis$0 mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$1</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Trie;Ljava/lang/CharSequence;)V</methodDescription><lineNumber>213</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>8</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$1 and fieldval$searchText mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='4'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$1</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$1 and fieldthis$0 mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='4'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$1</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>6</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Trie$1 and fieldval$searchText mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Trie.java</sourceFile><mutatedClass>org.ahocorasick.trie.Trie$1</mutatedClass><mutatedMethod>remove</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)Z</methodDescription><lineNumber>217</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>9</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.partialMatch(org.ahocorasick.trie.TrieTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>AbstractStatefulEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.AbstractStatefulEmitHandler</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>10</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>11</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/AbstractStatefulEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>AbstractStatefulEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.AbstractStatefulEmitHandler</mutatedClass><mutatedMethod>addEmit</mutatedMethod><methodDescription>(Lorg/ahocorasick/trie/Emit;)V</methodDescription><lineNumber>13</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/AbstractStatefulEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>AbstractStatefulEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.AbstractStatefulEmitHandler</mutatedClass><mutatedMethod>getEmits</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>18</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>2</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/handler/AbstractStatefulEmitHandler and fieldemits mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>AbstractStatefulEmitHandler.java</sourceFile><mutatedClass>org.ahocorasick.trie.handler.AbstractStatefulEmitHandler</mutatedClass><mutatedMethod>getEmits</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>18</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>2</block><killingTest>org.ahocorasick.trie.TrieTest.ushersTestStopOnHitSkipOne(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/handler/AbstractStatefulEmitHandler::getEmits to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>Token.java</sourceFile><mutatedClass>org.ahocorasick.trie.Token</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>8</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>9</index><block>0</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Token and fieldfragment mutated with null check on object</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>Token.java</sourceFile><mutatedClass>org.ahocorasick.trie.Token</mutatedClass><mutatedMethod>getFragment</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>12</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullPointerFixingMutator_M1_NULL_POINTER_FIXING_MUTATOR</mutator><index>4</index><block>1</block><killingTest/><description>M1: field dereference on object org/ahocorasick/trie/Token and fieldfragment mutated with null check on object</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Token.java</sourceFile><mutatedClass>org.ahocorasick.trie.Token</mutatedClass><mutatedMethod>getFragment</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>12</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>5</index><block>1</block><killingTest>org.ahocorasick.trie.TrieTest.tokenizeFullSentence(org.ahocorasick.trie.TrieTest)</killingTest><description>mutated return of Object value for org/ahocorasick/trie/Token::getFragment to ( if (x != null) null else throw new RuntimeException )</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorByPosition.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorByPosition</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.CRCRMutateConstantWith1</mutator><index>7</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorByPositionTest.sortOnPosition(org.ahocorasick.interval.IntervalableComparatorByPositionTest)</killingTest><description>Replaced operate with second operand</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IntervalableComparatorByPosition.java</sourceFile><mutatedClass>org.ahocorasick.interval.IntervalableComparatorByPosition</mutatedClass><mutatedMethod>compare</mutatedMethod><methodDescription>(Lorg/ahocorasick/interval/Intervalable;Lorg/ahocorasick/interval/Intervalable;)I</methodDescription><lineNumber>9</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ReturnValsMutator</mutator><index>8</index><block>1</block><killingTest>org.ahocorasick.interval.IntervalableComparatorByPositionTest.sortOnPosition(org.ahocorasick.interval.IntervalableComparatorByPositionTest)</killingTest><description>replaced return of integer sized value with (x == 0 ? 1 : 0)</description></mutation>
</mutations>
